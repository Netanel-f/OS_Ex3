jherskow, netanelf
Joshua Herskowitz (321658379), Netanel Fayoumi (201209806)
EX: 3

TODO Tasks:
- add error check = done //todo J: please double-check me
- Makefile = done
- valgrind check for mem-leaks = done
- README = done
- define framework destructors - destroy semaphore, atomic = maybe done
                   //todo J: ^ im not sure if i did enough for this ^
- code style = done
- unused variables check = not done  //todo J: plz do
- getting rid of all to-do/debug = not done  //todo J: plz do

other:
- maybe we don't need the atomic counter in reduce method. will check.


FILES:

MapReduceFramework.cpp   -- Implementation of framework.
Barrier.h                -- Header file for barrier class.
Barrier.cpp              -- Barrier helper class implementation.
Makefile                 -- An awesome makefile.
README                   -- This Pulitzer-worthy file.



REMARKS:

Implementation remarks:

    Thread's contexts are implemented as a struct. This struct holds pointers to shared resources,
    as well as the threads TID.

    Besides pointers to the input and output vector, there are a few important shared resources:

    The threads share a pointer to a vector-of-vectors, where each thread can use the inner
    IntermediateVec corresponding to it's TID.

    A pointer to an atomic<int> to control access to the inputVec.
    A pointer to a semaphore used in the shuffle phase.
    A pointer to a boolean everydayImShuffling, used to signal the end of the shuffling.
    And a pointer to a Barrier-class instance.

    The Barrier class holds the mutexes and lock/unlock functions to control access to these
    shared resources.